
from glob import glob
from os import path

configfile: "config.yaml"

TCGA_DIR = config["tcga_dir"]

SCRIPT_DIR = "scripts"
NCI_PID_DIR = path.join("data","nci_pid")
NCI_PWY_IDS = sorted([ fname.split(path.sep)[-1].split(".")[0] for fname in glob(path.join(NCI_PID_DIR, "pid_*.tab"))])
OMIC_TYPES = config["omic_types"]
CANCER_TYPES = config["cancer_types"]

TEMP_DIR = config["temp_dir"]
PWY_DIR = path.join(TEMP_DIR, "pathways")
PID_SIF_DIR = path.join(PWY_DIR, "nci_pid")
PWY_JSON_DIR = path.join(PWY_DIR, "pwy_choices")

SIM_DIR = path.join(TEMP_DIR, "simulations")
SIM_DATA_DIR = path.join(SIM_DIR, "datasets")
SIM_INFER_DIR = path.join(SIM_DIR, "inferred")

SIM_USED_FEATURE_DIR = path.join(SIM_DIR, "used_features")
SIM_SPLIT_DIR = path.join(SIM_DIR, "train_test_splits")

rule all:
    input:
        path.join(SIM_INFER_DIR, "heldout_BRCA_ACC_OV_COAD", "dropomics_cna", "pwys_nci_pid", "droppwys_", "tcga_full_pid_full.hdf")

rule sim_run_factorize:
    input:
        src=path.join(SCRIPT_DIR, "train_pwy_factors.jl"),
        dataset=path.join(SIM_DATA_DIR, "{dataset}.hdf"),
        split=path.join(SIM_SPLIT_DIR, "heldout_{ctypes}.json"),
	features=path.join(SIM_USED_FEATURE_DIR, "dropomics_{omics}.json"),
        pwys=path.join(PWY_JSON_DIR, "{collection}", "droppwys_{pwys}.json"),
    output:
        factors=path.join(SIM_INFER_DIR,"heldout_{ctypes,[_A-Z]*}", 
			                "dropomics_{omics,[_a-z]*}",
					"pwys_{collection,[_a-z]*}",
					"droppwys_{pwys,[_0-9]*}",
				        "{dataset,[_a-z]+}.hdf"),
        gp_std=path.join(SIM_INFER_DIR,"heldout_{ctypes,[_A-Z]*}", 
			                "dropomics_{omics,[_a-z]*}",
					"pwys_{collection,[_a-z]*}",
					"droppwys_{pwys,[_0-9]*}",
				        "{dataset,[_a-z]+}_gp_std.json"),
    shell:
        "julia --project=.. {input.src} {input.dataset} {input.split} {input.features} {input.pwys} {output.factors} {output.gp_std}"


def get_dropped_pwys(wc):
    res = wc["pwys"].split("_")
    if len(res) > 0:
        return res
    else:
        return ""


rule choose_pathways:
    input:
        src=path.join(SCRIPT_DIR, "choose_pathways.py"),
        pwys=expand(path.join(PWY_DIR, "{{collection}}", "{pwy}.sif"), pwy=NCI_PWY_IDS) 
    output:
        path.join(PWY_JSON_DIR, "{collection}", "droppwys_{pwys,[_0-9]*}.json")
    params:
        dropped=get_dropped_pwys
    shell:
        "python {input.src} {output} --all-pathways {input.pwys} --dropped-pathways {params.dropped}"


def get_heldout_ctypes(wc):
    res = wc["ctypes"].split("_")
    if len(res) > 0:
        return res
    else:
        return ""


rule sim_train_test_split:
    input:
        src=path.join(SCRIPT_DIR, "split_patients.py"),
        hdf=path.join(SIM_DATA_DIR, "tcga_full_pid_full.hdf")
    output:
        path.join(SIM_SPLIT_DIR, "heldout_{ctypes,[_A-Z]*}.json")
    params:
        heldout=get_heldout_ctypes
    shell:
        "python {input.src} {input.hdf} {output} --hold-out-ctypes {params.heldout}"


def get_dropped_omic_types(wc):
    res = wc["dropped_omics"].split("_")
    if len(res) > 0:
        return res
    else:
        return ""

rule sim_drop_omic:
    input:
        src=path.join(SCRIPT_DIR, "drop_features.py"),
        hdf=path.join(SIM_DATA_DIR, "tcga_full_pid_full.hdf")
    output:
        path.join(SIM_USED_FEATURE_DIR, "dropomics_{dropped_omics,[a-z]*}.json")
    params:
        drop_omic=get_dropped_omic_types
    shell:
        "python {input.src} {input.hdf} {output} --dropped-omic-types {params.drop_omic}"

rule simulate_full_data:
    input:
        src=path.join(SCRIPT_DIR, "simulate_data.jl"),
        pwy_sifs=expand(path.join(PID_SIF_DIR,"{pwy}.sif"), pwy=NCI_PWY_IDS),
	pat_tree=path.join(TCGA_DIR, "tcga_patient_hierarchy.json")
    output:
        path.join(SIM_DATA_DIR, "tcga_full_pid_full.hdf")
    shell:
        "julia --project=.. {input.src} {input.pwy_sifs} {input.pat_tree} {output}"


rule nci_pid_to_sif:
    input:
        src=path.join(SCRIPT_DIR, "pid_to_sif.py"),
        tab=path.join(NCI_PID_DIR, "{pwy}.tab")
    output:
        path.join(PID_SIF_DIR,"{pwy}.sif")
    shell:
        "python {input.src} {input.tab} {output}"



