
from glob import glob
from os import path

configfile: "config.yaml"

SIM_PARAMS = config["sim_params"]
SIM_REPLICATES = list(range(SIM_PARAMS["sim_replicates"]))

TCGA_DATA_DIR = config["tcga_dir"]

SCRIPT_DIR = "scripts"
JULIA_SCRIPT_DIR = path.join(SCRIPT_DIR, "julia_scripts")
R_DIR = path.join(SCRIPT_DIR, "R_scripts")
NCI_PID_DIR = path.join("data","ncipid")
NCI_PWY_IDS = sorted([ fname.split(path.sep)[-1].split(".")[0] for fname in glob(path.join(NCI_PID_DIR, "pid_*.tab"))])
OMIC_TYPES = config["omic_types"]
CANCER_TYPES = config["cancer_types"]

TEMP_DIR = config["temp_dir"]
PWY_DIR = path.join(TEMP_DIR, "pathways")
SIF_DIR = path.join(PWY_DIR, "sifs")
PID_SIF_DIR = path.join(SIF_DIR, "ncipid")
PWY_JSON_DIR = path.join(PWY_DIR, "jsons")

TCGA_DIR = path.join(TEMP_DIR, "tcga_evaluations")
TCGA_VIS_DIR = path.join(TCGA_DIR, "visualizations")

SIM_DIR = path.join(TEMP_DIR, "simulation_study")
SIM_DATA_DIR = path.join(SIM_DIR, "datasets")
SIM_INFER_DIR = path.join(SIM_DIR, "inferred")

PYNBS_PREP_DIR = path.join(TEMP_DIR, "pynbs_tsvs")
PYNBS_NET_DIR = path.join(PYNBS_PREP_DIR, "networks")
PYNBS_MUT_DIR = path.join(PYNBS_PREP_DIR, "mutations")

INSTREG = [0.0, 500.0, 5000.0]
FEATREG = [0.0, 500.0, 5000.0]
LR = [0.005, 0.002]
MAX_ITER = 1000


rule all:
    input:
        expand(path.join(TCGA_VIS_DIR, "embedding_scatter", "lr={lr}_instreg={instreg}_featreg={featreg}.html"), lr=LR, instreg=INSTREG, featreg=FEATREG),
        #expand(path.join(TCGA_VIS_DIR, "plots", "{off}offset_lr={lr}_instreg={instreg}_featreg={featreg}.png"), off=["feature","instance"], lr=LR, instreg=INSTREG, featreg=FEATREG),
        expand(path.join(TCGA_DIR, "imputed", "lr={lr}_instreg={instreg}_featreg={featreg}/imputed.hdf"), lr=LR, instreg=INSTREG, featreg=FEATREG)


rule sim_run_pynbs:
    input:
        img="pynbs.simg"
    output:
        "pynbs_help.txt"
    shell:
        "./{input.img} --help > {output}"


rule matfac_model_plot:
    input:
        fitted=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        src=path.join(SCRIPT_DIR, "vis_offset_plot.py")
    output:
        plt=path.join(TCGA_VIS_DIR, "plots", "{axis}offset_{params,[_.=0-9a-z]+}.png")
    shell:
        "python {input.src} {input.fitted} {wildcards.axis} {output.plt}"


rule matfac_embedding_scatter:
    input:
        fitted=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        src=path.join(SCRIPT_DIR, "vis_embedding_scatter.py")
    output:
        scatter=path.join(TCGA_VIS_DIR, "embedding_scatter", "{params,[_.=0-9a-z]+}.html")
    shell:
        "python {input.src} {input.fitted} {output.scatter}"


rule matfac_impute:
    input:
        fitted=path.join(TCGA_DIR, "fitted","{params}","model.hdf"),
        src=path.join(SCRIPT_DIR, "matfac_impute.jl")
    output:
        imputed=path.join(TCGA_DIR, "imputed","{params}","imputed.hdf")
    shell:
        "julia --project=.. {input.src} {input.fitted} {output.imputed}"


rule run_matfac:
    input:
        src=path.join(SCRIPT_DIR, "run_matfac.jl"),
        hdf=path.join(TCGA_DATA_DIR, "tcga_omic_preprocessed.hdf"),
        pwy=path.join(PWY_JSON_DIR, "ncipid.json")
    output:
        fitted=path.join(TCGA_DIR, "fitted", "lr={lr,[.0-9]+}_instreg={instreg,[.0-9]+}_featreg={featreg,[.0-9]+}", "model.hdf")
    resources:
        nvidia_gpu=1
    shell:
        "julia --project=.. {input.src} {input.hdf} {input.pwy} {output.fitted} inst_reg_weight={wildcards.instreg} feat_reg_weight={wildcards.featreg} lr={wildcards.lr} max_iter={MAX_ITER}"

rule sim_pynbs_prep_network:
    input:
        src=path.join(SCRIPT_DIR,"pynbs_prep_pwy.py"),
        pwys_json=path.join(PWY_JSON_DIR, "{pwys}.json")
    output:
        net_tsv=path.join(PYNBS_NET_DIR, "{pwys}.tsv")
    shell:
        "python {input.src} {input.pwys_json} {output.net_tsv}"


rule simulate_full_data:
    input:
        src=path.join(JULIA_SCRIPT_DIR, "simulate_data.jl"),
        pwy_json=path.join(PWY_JSON_DIR,"{pwys}.json"),
        pat_tree=path.join(TCGA_DIR, "tcga_patient_hierarchy.json")
    output:
        path.join(SIM_DATA_DIR, "tcga_{pwys}.hdf")
    shell:
        "julia --project=.. {input.src} {input.pwy_json} {input.pat_tree} {output}"


rule get_pynbs:
    output:
        "pynbs.simg"
    shell:
        "singularity pull --name {output} shub://dpmerrell/pynbs-singularity:latest"
    


def get_sifs(wc):
    print(wc["collection"])
    if wc["collection"] == "ncipid":
        ids = NCI_PWY_IDS
    sifs = sorted([path.join(PID_SIF_DIR, wc["collection"], "{}.sif").format(pwy) for pwy in ids])
    print(sifs)
    return sifs


rule ncipid_sifs_to_json:
    input:
        src=path.join(SCRIPT_DIR, "sifs_to_json.py"),
    #sifs=get_sifs
        sifs=expand(path.join(PID_SIF_DIR, "{pwy}.sif"), pwy=NCI_PWY_IDS)
    output:
        json=path.join(PWY_JSON_DIR, "ncipid.json")
    shell:
        "python {input.src} --sif-files {input.sifs} --out-json {output.json}"


rule ncipid_to_sif:
    input:
        src=path.join(SCRIPT_DIR, "pid_to_sif.py"),
        tab=path.join(NCI_PID_DIR, "{pwy}.tab")
    output:
        path.join(PID_SIF_DIR, "{pwy}.sif")
    shell:
        "python {input.src} {input.tab} {output}"



