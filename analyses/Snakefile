
from os.path import join

configfile: "config.yaml"

####################################
# Define some useful directories
####################################

## Data directories
TCGA_DIR = config["tcga_dir"]
REACTOME_DIR = config["reactome_dir"]

RESULT_DIR = config["result_dir"]
## Simulation study directories
SIM_DIR = join(RESULT_DIR, "simulation_study")
SIM_DATA_DIR = join(SIM_DIR, "data_hdfs")
SIM_PWY_DIR = join(SIM_DIR, "pathway_jsons")
SIM_PARAM_DIR = join(SIM_DIR, "true_parameters")
SIM_INFER_DIR = join(SIM_DIR, "inferred_parameters")
SIM_SCORE_DIR = join(SIM_DIR, "scores")
SIM_VIS_DIR = join(SIM_DIR, "visualizations")
SIM_SCATTER_DIR = join(SIM_VIS_DIR, "embedding_scatter")
SIM_FACTORPLOT_DIR = join(SIM_VIS_DIR, "factor_plots")


####################################
# Downloading data
####################################
REACTOME_URL = config["reactome_url"]

####################################
# Unpack simulation study parameters
####################################
SIM_PARAMS = config["sim_params"]
SIM_DATA_PARAMS = SIM_PARAMS["data_params"]
SIM_REPS = list(range(SIM_DATA_PARAMS["reps"]))
SIM_SNR = SIM_DATA_PARAMS["snr"]
SIM_TRUE_K = SIM_DATA_PARAMS["true_K"]

SIM_MATFAC_PARAMS = SIM_PARAMS["matfac_params"]
SIM_MAX_EPOCHS = SIM_MATFAC_PARAMS["max_epochs"]
SIM_LR = SIM_MATFAC_PARAMS["lr"]
SIM_LAMBDA_LAYER = SIM_MATFAC_PARAMS["lambda_layer"]
SIM_LAMBDA_X = SIM_MATFAC_PARAMS["lambda_X"]
SIM_LAMBDA_Y = SIM_MATFAC_PARAMS["lambda_Y"]
SIM_USED_K = SIM_MATFAC_PARAMS["used_K"]

###################################################################################################
# RULES
###################################################################################################


rule all:
    input:
       inferred=expand(join(SIM_INFER_DIR,"usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf"),
                       usedk=SIM_USED_K, truek=SIM_TRUE_K, snr=SIM_SNR, rep=SIM_REPS),
       scores=expand(join(SIM_SCORE_DIR,"usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.json"),
                     usedk=SIM_USED_K, truek=SIM_TRUE_K, snr=SIM_SNR, rep=SIM_REPS),
       scatters=expand(join(SIM_SCATTER_DIR,"usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.html"),
                       usedk=SIM_USED_K, truek=SIM_TRUE_K, snr=SIM_SNR, rep=SIM_REPS),
       factorplots=expand(join(SIM_FACTORPLOT_DIR,"usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.html"),
                          usedk=SIM_USED_K, truek=SIM_TRUE_K, snr=SIM_SNR, rep=SIM_REPS),


###########################
# Simulation study
###########################

rule factor_plot:
    input:
        src="scripts/vis_pathway_factor_plot.py",
        params_hdf=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf"),
        pwy_json=join(SIM_PWY_DIR, "usedk={usedk}.json")
    output:
        factorplot=join(SIM_FACTORPLOT_DIR,"usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.html")
    params:
        plottedk=lambda wc: int(wc["usedk"])//5
    shell:
        "python {input.src} {input.params_hdf} {input.pwy_json} {output.factorplot} {params.plottedk}"

rule embedding_scatter:
    input:
        src="scripts/vis_embedding_scatter.py",
        clinical_hdf=join(TCGA_DIR, "tcga_clinical.hdf"),
        params_hdf=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf")
    output:
        scatter_html=join(SIM_SCATTER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.html")
    shell:
        "python {input.src} {input.params_hdf} {input.clinical_hdf} 0 {output.scatter_html}"


rule score_matfac:
    input:
        src="scripts/score_matfac.py",
        true_params=join(SIM_PARAM_DIR, "truek={truek}_snr={snr}_rep={rep}.hdf"),
        pred_params=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf")
    output:
        score_json=join(SIM_SCORE_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.json")
    shell:
        "python {input.src} {input.true_params} {input.pred_params} {output.score_json}" 

rule run_matfac:
    input:
        src="scripts/run_matfac.jl",
        data=join(SIM_DATA_DIR, "truek={truek}_snr={snr}_rep={rep}.hdf"),
        pwy_json=join(SIM_PWY_DIR, "usedk={usedk}.json")
    output:
        inferred_bson=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.bson"),
        inferred_hdf=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf")
    threads: 4
    shell:
        "julia --threads={threads} --project=. {input.src} {input.data} {input.pwy_json} {output.inferred_bson} {output.inferred_hdf} max_epochs={SIM_MAX_EPOCHS} lr={SIM_LR} lambda_layer={SIM_LAMBDA_LAYER} lambda_X={SIM_LAMBDA_X} lambda_Y={SIM_LAMBDA_Y}"

# NOTICE for now we have usedk==truek
rule simulate_data:
    input:
        src="scripts/simulate_data.jl",
        pwy_json=join(SIM_PWY_DIR, "usedk={truek}.json"), 
        sample_json=join(TCGA_DIR, "tcga_samples.json"),
        feature_json=join(TCGA_DIR, "tcga_features.json")
    output:
        data_hdf=join(SIM_DATA_DIR, "truek={truek}_snr={snr}_rep={rep}.hdf"),
        param_hdf=join(SIM_PARAM_DIR, "truek={truek}_snr={snr}_rep={rep}.hdf")
    threads: 4
    shell:
        "julia --threads={threads} --project=. {input.src} {input.pwy_json} {input.sample_json} {input.feature_json} {output.data_hdf} {output.param_hdf} snr={wildcards.snr}"
   

rule select_used_pwys:
    input:
        src="scripts/select_pathways.py",
        feature_json=join(TCGA_DIR, "tcga_features.json"),
        all_pwy_json=join(REACTOME_DIR, "reactome.json"),
    output:
        pwy_json=join(SIM_PWY_DIR, "usedk={usedk}.json"),
    shell:
        "python {input.src} {input.all_pwy_json} {input.feature_json} {wildcards.usedk} {output.pwy_json}"


######################################
# Download and preprocess Reactome
######################################

rule reactome_txt_to_json:
    input:
        src="scripts/reactome_txt_to_json.py",
        txt=join(REACTOME_DIR, "reactome.hgnc.txt"),
    output:
        json=join(REACTOME_DIR, "reactome.json")
    shell:
        "python {input.src} {input.txt} {output.json}"

rule unzip_reactome:
    input:
        tarball=join(REACTOME_DIR, "reactome.hgnc.txt.tar.gz")
    output:
        tsv=join(REACTOME_DIR, "reactome.hgnc.txt")
    shell:
        "tar -xvzf {input.tarball}"

rule download_reactome:
    output:
        tarball=join(REACTOME_DIR, "reactome.hgnc.txt.tar.gz")
    shell:
        "curl {REACTOME_URL} --output reactome.hgnc.txt.tar.gz"


