
from glob import glob
from os import path

configfile: "config.yaml"

SIM_PARAMS = config["sim_params"]
SIM_REPLICATES = list(range(SIM_PARAMS["sim_replicates"]))

TCGA_DIR = config["tcga_dir"]

SCRIPT_DIR = "scripts"
JULIA_SCRIPT_DIR = path.join(SCRIPT_DIR, "julia_scripts")
R_DIR = path.join(SCRIPT_DIR, "R_scripts")
NCI_PID_DIR = path.join("data","ncipid")
NCI_PWY_IDS = sorted([ fname.split(path.sep)[-1].split(".")[0] for fname in glob(path.join(NCI_PID_DIR, "pid_*.tab"))])
OMIC_TYPES = config["omic_types"]
CANCER_TYPES = config["cancer_types"]

TEMP_DIR = config["temp_dir"]
PWY_DIR = path.join(TEMP_DIR, "pathways")
SIF_DIR = path.join(PWY_DIR, "sifs")
PID_SIF_DIR = path.join(SIF_DIR, "ncipid")
PWY_JSON_DIR = path.join(PWY_DIR, "jsons")

SIM_DIR = path.join(TEMP_DIR, "simulations")
SIM_DATA_DIR = path.join(SIM_DIR, "datasets")
SIM_INFER_DIR = path.join(SIM_DIR, "inferred")

SIM_USED_FEATURE_DIR = path.join(SIM_DIR, "used_features")
SIM_SPLIT_DIR = path.join(SIM_DIR, "train_test_splits")
SIM_MASK_DIR = path.join(SIM_DIR, "missing_data_masks")
SIM_SCORE_DIR = path.join(SIM_DIR, "scores")

test_holdout_ctypes = "_".join(CANCER_TYPES[5:])
test_holdout_pwys = "_".join(NCI_PWY_IDS[50:])

PYNBS_PREP_DIR = path.join(TEMP_DIR, "pynbs_tsvs")
PYNBS_NET_DIR = path.join(PYNBS_PREP_DIR, "networks")
PYNBS_MUT_DIR = path.join(PYNBS_PREP_DIR, "mutations")

rule all:
    input:
        path.join(PWY_JSON_DIR, "ncipid.json")
#        path.join(SIM_SCORE_DIR,"dataset=tcga_ncipid",
#                                "factor_model",
#                                "split=keep:HNSC,BRCA",
#                                "features=dropomic:",
#                                "mask=droprand:0.05",
#                                "pwys=ncipid",
#                                "imputation.json"),
#        path.join(SIM_INFER_DIR,"dataset=tcga_ncipid",
#                                "factor_model",
#                                "split=keep:HNSC,BRCA",
#                                "features=dropomic:",
#                                "mask=droprand:0.05",
#                                "pwys=ncipid",
#                                "factors.hdf"),
#        path.join(SIM_INFER_DIR,"dataset=tcga_ncipid",
#                                "plier",
#				"split=keep:HNSC,BRCA",
#                                "pwys=ncipid",
#                                "result.rds"),
#        "pynbs_help.txt"
#        net_tsv=path.join(PYNBS_NET_DIR, "ncipid.tsv"),
#        mut_tsv=path.join(PYNBS_MUT_DIR, "dataset=tcga_ncipid", "split=keep:HNSC,BRCA", "mask=droprand:0.05.tsv")


rule sim_score_imputation:
    input:
        src=path.join(SCRIPT_DIR, "score_imputation.py"),
        imp=path.join(SIM_INFER_DIR,"dataset={dataset}",
                                    "factor_model",
                                    "split={split}",
                                    "features={features}",
                                    "mask={mask}",
                                    "pwys={pwys}",
                                    "imputed.json"),
        truth=path.join(SIM_DATA_DIR, "{dataset}.hdf"),
        mask=path.join(SIM_MASK_DIR, "dataset={dataset}", "mask={mask}.json")
    output:
        path.join(SIM_SCORE_DIR,"dataset={dataset}",
                                "factor_model",
                                "split={split}",
                                "features={features}",
                                "mask={mask}",
                                "pwys={pwys}",
                                "imputation.json")
    shell:
        "python {input.src} {input.imp} {input.truth} {input.mask} {output}"


rule sim_run_pynbs:
    input:
        img="pynbs.simg"
    output:
        "pynbs_help.txt"
    shell:
        "./{input.img} --help > {output}"


rule sim_pynbs_prep_network:
    input:
        src=path.join(SCRIPT_DIR,"pynbs_prep_pwy.py"),
        pwys_json=path.join(PWY_JSON_DIR, "{pwys}.json")
    output:
        net_tsv=path.join(PYNBS_NET_DIR, "{pwys}.tsv")
    shell:
        "python {input.src} {input.pwys_json} {output.net_tsv}"


rule sim_pynbs_prep_mut:
    input:
        src=path.join(SCRIPT_DIR,"pynbs_prep_mut.py"),
        omic_hdf=path.join(SIM_DATA_DIR,"{dataset}.hdf"),
        split_json=path.join(SIM_SPLIT_DIR,"dataset={dataset}","split={split}.json"),
        mask_json=path.join(SIM_MASK_DIR, "dataset={dataset}", "mask={mask}.json"),
    output:
        mut_tsv=path.join(PYNBS_MUT_DIR, "dataset={dataset}", "split={split}", "mask={mask}.tsv")
    shell:
        "python {input.src} {input.omic_hdf} {input.split_json} {input.mask_json} {output.mut_tsv}"


rule sim_run_plier:
    input:
        src=path.join(R_DIR, "plier_wrapper.R"),
        dataset_hdf=path.join(SIM_DATA_DIR, "{dataset}.hdf"),
        split_json=path.join(SIM_SPLIT_DIR, "dataset={dataset}","split={split}.json"),
        pwys_json=path.join(PWY_JSON_DIR, "{pwys}.json")
    output:
        rds=path.join(SIM_INFER_DIR,"dataset={dataset}",
                                    "plier",
                                    "split={split}",
                                    "pwys={pwys}",
                                    "result.rds"),
    shell:
        "Rscript {input.src} {input.dataset_hdf} {input.split_json} {input.pwys_json} {output.rds}"


rule sim_run_factorize:
    input:
        src=path.join(JULIA_SCRIPT_DIR, "train_pwy_factors.jl"),
        dataset_hdf=path.join(SIM_DATA_DIR, "{dataset}.hdf"),
        split_json=path.join(SIM_SPLIT_DIR, "dataset={dataset}", "split={split}.json"),
        features_json=path.join(SIM_USED_FEATURE_DIR, "dataset={dataset}", "features={features}.json"),
        mask_json=path.join(SIM_MASK_DIR, "dataset={dataset}", "mask={mask}.json"),
        pwys_json=path.join(PWY_JSON_DIR, "{pwys}.json")
    output:
        factors=path.join(SIM_INFER_DIR,"dataset={dataset}",
                                        "factor_model",
                                        "split={split}",
                                        "features={features}",
                                        "mask={mask}",
                                        "pwys={pwys}",
                                        "factors.hdf"),
        imputed=path.join(SIM_INFER_DIR,"dataset={dataset}",
                                        "factor_model",
                                        "split={split}",
                                        "features={features}",
                                        "mask={mask}",
                                        "pwys={pwys}",
                                        "imputed.json")
    shell:
        "julia --project=.. {input.src} {input.dataset_hdf} {input.split_json} {input.features_json} {input.mask_json} {input.pwys_json} {output.factors}" # {output.imputed}"


rule sim_train_test_split:
    input:
        src=path.join(SCRIPT_DIR, "split_patients.py"),
        hdf=path.join(SIM_DATA_DIR, "{dataset}.hdf")
    output:
        path.join(SIM_SPLIT_DIR, "dataset={dataset}", "split={split}.json")
    shell:
        "python {input.src} {input.hdf} {output} --split-str {wildcards.split}"


rule sim_get_features:
    input:
        src=path.join(SCRIPT_DIR, "choose_features.py"),
        hdf=path.join(SIM_DATA_DIR, "{dataset}.hdf")
    output:
        path.join(SIM_USED_FEATURE_DIR, "dataset={dataset}", "features={features}.json")
    shell:
        "python {input.src} {input.hdf} {output} --feature-str {wildcards.features}"


rule sim_mask_data:
    input:
        src=path.join(SCRIPT_DIR, "mask_data.py"),
        dataset=path.join(SIM_DATA_DIR, "{dataset}.hdf")
    output:
        path.join(SIM_MASK_DIR, "dataset={dataset}", "mask={mask_str}.json")
    shell:
        "python {input.src} {input.dataset} {output} --mask-str {wildcards.mask_str}"


rule simulate_full_data:
    input:
        src=path.join(JULIA_SCRIPT_DIR, "simulate_data.jl"),
        pwy_json=path.join(PWY_JSON_DIR,"{pwys}.json"),
        pat_tree=path.join(TCGA_DIR, "tcga_patient_hierarchy.json")
    output:
        path.join(SIM_DATA_DIR, "tcga_{pwys}.hdf")
    shell:
        "julia --project=.. {input.src} {input.pwy_json} {input.pat_tree} {output}"


rule get_pynbs:
    output:
        "pynbs.simg"
    shell:
        "singularity pull --name {output} shub://dpmerrell/pynbs-singularity:latest"
    


def get_sifs(wc):
    print(wc["collection"])
    if wc["collection"] == "ncipid":
        ids = NCI_PWY_IDS
    sifs = sorted([path.join(PID_SIF_DIR, wc["collection"], "{}.sif").format(pwy) for pwy in ids])
    print(sifs)
    return sifs


rule ncipid_sifs_to_json:
    input:
        src=path.join(SCRIPT_DIR, "sifs_to_json.py"),
    #sifs=get_sifs
        sifs=expand(path.join(PID_SIF_DIR, "{pwy}.sif"), pwy=NCI_PWY_IDS)
    output:
        json=path.join(PWY_JSON_DIR, "ncipid.json")
    shell:
        "python {input.src} --sif-files {input.sifs} --out-json {output.json}"


rule ncipid_to_sif:
    input:
        src=path.join(SCRIPT_DIR, "pid_to_sif.py"),
        tab=path.join(NCI_PID_DIR, "{pwy}.tab")
    output:
        path.join(PID_SIF_DIR, "{pwy}.sif")
    shell:
        "python {input.src} {input.tab} {output}"



