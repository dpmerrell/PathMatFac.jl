
from os.path import join, sep
from itertools import product
from collections import OrderedDict

configfile: "config.yaml"

# Construct a list from the cartesian product
# of a dictionary's values
def param_dict_to_list(param_dict):

    if isinstance(param_dict, list):
        return param_dict
    else:
        ks = sorted(list(param_dict.keys()))
        vs = []
        for k in ks:
            v = param_dict[k]
            if isinstance(v, int):
                v = list(range(v))
            vs.append(v)

        all_kvs = [zip(ks, combo) for combo in product(*vs)]
        return ["__".join(["{}={}".format(pair[0],pair[1]) for pair in kv]) for kv in all_kvs]

# Matrix factorization params
#####################################################################
# Define some useful directories
#####################################################################

## Data directories
TCGA_DIR = config["tcga_dir"]
REACTOME_DIR = config["reactome_dir"]
PARADIGM_DIR = config["paradigm_dir"] 
PARADIGM_URL = config["paradigm_url"]

RESULT_DIR = config["result_dir"]
## Simulation study directories
SIM_DIR = join(RESULT_DIR, "simulation_study")
SIM_SCHEMA_DIR = join(SIM_DIR, "data_schema")
SIM_DATA_DIR = join(SIM_DIR, "data_hdfs")
SIM_PWY_DIR = join(SIM_DIR, "pathway_jsons")
SIM_PARAM_DIR = join(SIM_DIR, "true_parameters")
SIM_INFER_DIR = join(SIM_DIR, "fitted_parameters")
SIM_IMPUTE_DIR = join(SIM_DIR, "imputed_data")
SIM_HISTORY_DIR = join(SIM_DIR, "training_histories")
SIM_SCORE_DIR = join(SIM_DIR, "scores")
SIM_VIS_DIR = join(SIM_DIR, "visualizations")
SIM_SCATTER_DIR = join(SIM_VIS_DIR, "embedding_scatter")
SIM_FACTORPLOT_DIR = join(SIM_VIS_DIR, "factor_plots")

## TCGA run directories
EXP_DIR = join(RESULT_DIR, "real_data_runs")
EXP_DATA_DIR = join(EXP_DIR, "omic_data")
EXP_FITTED_DIR = join(EXP_DIR, "fitted_transforms")
EXP_TRANS_TRAIN_DIR = join(EXP_DIR, "transformed_training_sets")
EXP_TRANS_TEST_DIR = join(EXP_DIR, "transformed_test_sets")
EXP_REGRESSOR_DIR = join(EXP_DIR, "fitted_regressors")
EXP_REGRESSOR_SCORE_DIR = join(EXP_DIR, "regression_scores")
EXP_HISTORY_DIR = join(EXP_DIR, "training_histories")
EXP_VIS_DIR = join(EXP_DIR, "visualizations")
EXP_SCATTER_DIR = join(EXP_VIS_DIR, "embedding_scatter")
EXP_FACTORPLOT_DIR = join(EXP_VIS_DIR, "factor_plots")


#####################################################################
# Downloading data
#####################################################################
REACTOME_URL = config["reactome_url"]


#####################################################################
# Unpack simulation study parameters
#####################################################################
SIM_PARAMS = config["sim_params"]
SIM_PARAMS = {analysis: {size: OrderedDict([("methods", ["__".join(["method={}".format(m), l]) for m, m_param in s_params["methods"].items() for l in param_dict_to_list(m_param) ] ),\
                                            ("schema", param_dict_to_list(s_params["schema"]) ),\
                                            ("sim", param_dict_to_list(s_params["sim"]) ),\
                                            ("top_pwys", ["top_pwys={}".format(k) for k in s_params["top_pwys"]]),\
                                            ("corruption", param_dict_to_list(s_params["corruption"]) ),\
                                            ("replicates", ["srep={}".format(rep) for rep in range(s_params["srep"])] )
                                           ])\
                         for size, s_params in sizes.items() }\ 
             for analysis, sizes in SIM_PARAMS.items()}

SIM_ANALYSES_SIZES = [(k1, k2) for k1, v1 in SIM_PARAMS.items() for k2 in v1.keys()]

# Print them out
print("Simulations:")
for a, a_p in SIM_PARAMS.items():
    print(a)
    for s, s_p in a_p.items():
        print("\t", s)
        for f, f_p in s_p.items():
            print("\t\t", f, ": ", f_p)

print(SIM_ANALYSES_SIZES)

#####################################################################
# Unpack TCGA regression parameters
#####################################################################
TCGA_REGRESSION_PARAMS = config["tcga_regressions"]
TCGA_FOLDS = TCGA_REGRESSION_PARAMS["cross_val_folds"]
TCGA_REGRESSION_TARGETS = TCGA_REGRESSION_PARAMS["targets"]

TCGA_REGRESSION_PARAMS = {"methods": ["__".join(["method={}".format(m), l]) for m, m_param in TCGA_REGRESSION_PARAMS["methods"].items() for l in param_dict_to_list(m_param) ],
                          "data": param_dict_to_list(TCGA_REGRESSION_PARAMS["data"]),
                          "pathways": param_dict_to_list(TCGA_REGRESSION_PARAMS["pathways"]),
                          "targets": TCGA_REGRESSION_TARGETS,
                          "folds": list(range(TCGA_FOLDS))
                         }



print("\nTCGA Runs:")
for k, v in TCGA_REGRESSION_PARAMS.items():
    print("\t", k, ": ", v)



###################################################################################################
# RULES
###################################################################################################

rule all:
    input:
       #sim_score_tables=[join(SIM_SCORE_DIR, "sim_scores", analysis, size+".tsv") for analysis, size in SIM_ANALYSES_SIZES],
       #sim_snr_lineplot=join(SIM_VIS_DIR, "snr-lineplot.png"),
       #sim_snr_heatmap=join(SIM_VIS_DIR, "snr-heatmap.png")
       #exp_fitted=expand(join(EXP_FITTED_DIR,"{method}/{data}/{pathways}/fitted.hdf"),
       #                  method=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
       #                  pathways=TCGA_REGRESSION_PARAMS["pathways"]),
       #exp_scatters=expand(join(EXP_SCATTER_DIR,"{method}/{data}/{pathways}/scatter.html"),
       #                    method=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
       #                    pathways=TCGA_REGRESSION_PARAMS["pathways"]),
       #exp_factorplots=expand(join(EXP_FACTORPLOT_DIR,"{method}/{data}/{pathways}/factors.html"),
       #                    method=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
       #                    pathways=TCGA_REGRESSION_PARAMS["pathways"]),
       #exp_pca_regressors=expand(join(EXP_REGRESSOR_DIR, "{transform}/{data}__fold={fold}/{pathways}/regressor.pkl"),
       #                          transform=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
       #                          fold=list(range(TCGA_FOLDS)), pathways=TCGA_REGRESSION_PARAMS["pathways"]),
       #exp_transformed_test=expand(join(EXP_TRANS_TEST_DIR, "{transform}/{data}__fold={fold}/{pathways}/transformed.hdf"),
       #                          transform=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
       #                          fold=list(range(TCGA_FOLDS)), pathways=TCGA_REGRESSION_PARAMS["pathways"]),
       exp_ctype_scores=expand(join(EXP_REGRESSOR_SCORE_DIR, "{transform}/{data}__fold={fold}__target={target}/{pathways}/scores.json"),
                               transform=TCGA_REGRESSION_PARAMS["methods"], data=TCGA_REGRESSION_PARAMS["data"],
                               fold=TCGA_REGRESSION_PARAMS["folds"], target=TCGA_REGRESSION_PARAMS["targets"],
                               pathways=TCGA_REGRESSION_PARAMS["pathways"]),


#####################################################################
# Runs on real (TCGA) data
#####################################################################

rule exp_factor_plot:
    input:
        src="scripts/python/vis_pathway_factor_plot.py",
        params_hdf=join(EXP_FITTED_DIR, "{method}/{data}/{pathways}/fitted.hdf"),
        pwy_json=join(REACTOME_DIR, "{pathways}.json")
    output:
        factorplot=join(EXP_FACTORPLOT_DIR,"{method,[_.=0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/factors.html")
    params:
        plottedk=100
    resources:
        mem_mb=5000
    shell:
        "python {input.src} {input.params_hdf} {input.pwy_json} {output.factorplot} {params.plottedk}"


rule exp_embedding_scatter:
    input:
        src="scripts/python/vis_embedding_scatter.py",
        clinical_hdf=join(TCGA_DIR, "tcga_clinical.hdf"),
        params_hdf=join(EXP_FITTED_DIR, "{method}/{data}/{pathways}/fitted.hdf"),
    output:
        scatter_html=join(EXP_SCATTER_DIR, "{method,[_.=0-9a-zA-Z]+}/{data,[_:.=0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/scatter.html")
    resources:
        mem_mb=5000
    shell:
        "python {input.src} {input.params_hdf} {input.clinical_hdf} 1 {output.scatter_html}"


rule exp_fit_matfac:
    input:
        src="scripts/julia/fit_matfac.jl",
        status_file="gpu_status.txt",
        data=join(EXP_DATA_DIR, "{data}.hdf"),
        pwy_json=join(REACTOME_DIR, "{pathways}.json"),
    output:
        inferred_bson=join(EXP_FITTED_DIR, "method=matfac__{method,[_.=0-9a-zA-Z]+}/{data,[_.:=0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.bson"),
        inferred_hdf=join(EXP_FITTED_DIR, "method=matfac__{method,[_.=0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.hdf"),
        history_json=join(EXP_HISTORY_DIR, "method=matfac__{method,[_.=0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/history.json"),
    resources:
        mem_mb=10000,
        gpu=1
    params:
        matfac_kwargs=lambda wc: " ".join(wc["method"].split("__"))
    shell:
        "julia --project=. -t 1 {input.src} {input.data} {input.pwy_json} {output.inferred_bson} {output.inferred_hdf} {params.matfac_kwargs} history_json={output.history_json} gpu_status_file={input.status_file}"


#############################################################
# TCGA regression tasks
#############################################################

rule exp_score_survival_regressor:
    input:
        src="scripts/R/score_survival_regressor.R",
        fitted_regressor=join(EXP_REGRESSOR_DIR, "{transform}/{data}__target=survival/{pathways}/surv_regressor.rds"),
        transformed_test=join(EXP_TRANS_TEST_DIR, "{transform}/{data}__target=survival/{pathways}/transformed.hdf")
    output:
        score_json=join(EXP_REGRESSOR_SCORE_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target=survival/{pathways,[_.=:0-9a-zA-Z]+}/scores.json")
    shell:
        "Rscript {input.src} {input.fitted_regressor} {input.transformed_test} {output.score_json}"


rule exp_fit_survival_regressor:
    input:
        src="scripts/R/fit_survival_regressor.R",
        transformed_train=join(EXP_TRANS_TRAIN_DIR, "{transform}/{data}__target=survival/{pathways}/transformed.hdf")
    output:
        trained_model=join(EXP_REGRESSOR_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target=survival/{pathways,[_.=:0-9a-zA-Z]+}/surv_regressor.rds"),
    shell:
        "Rscript {input.src} {input.transformed_train} {output.trained_model}"


rule exp_score_regressor:
    input:
        src="scripts/python/score_regressor.py",
        fitted_regressor=join(EXP_REGRESSOR_DIR, "{transform}/{data}__target={target}/{pathways}/regressor.pkl"),
        transformed_test=join(EXP_TRANS_TEST_DIR, "{transform}/{data}__target={target}/{pathways}/transformed.hdf")
    output:
        score_json=join(EXP_REGRESSOR_SCORE_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(pathologic_stage)}/{pathways,[_.=:0-9a-zA-Z]+}/scores.json")
    shell:
        "python {input.src} {input.fitted_regressor} {input.transformed_test} {output.score_json} --target {wildcards.target}"


rule exp_fit_regressor:
    input:
        src="scripts/python/fit_regressor.py",
        transformed_train=join(EXP_TRANS_TRAIN_DIR, "{transform}/{data}__target={target}/{pathways}/transformed.hdf")
    output:
        trained_model=join(EXP_REGRESSOR_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(pathologic_stage)}/{pathways,[_.=:0-9a-zA-Z]+}/regressor.pkl"),
        training_scores=join(EXP_REGRESSOR_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(pathologic_stage)}/{pathways,[_.=:0-9a-zA-Z]+}/scores.json")
    shell:
        "python {input.src} {input.transformed_train} {output.trained_model} {output.training_scores} --target {wildcards.target}"


rule exp_score_classifier:
    input:
        src="scripts/python/score_classifier.py",
        fitted_regressor=join(EXP_REGRESSOR_DIR, "{transform}/{data}__target={target}/{pathways}/classifier.pkl"),
        transformed_test=join(EXP_TRANS_TEST_DIR, "{transform}/{data}__target={target}/{pathways}/transformed.hdf")
    output:
        score_json=join(EXP_REGRESSOR_SCORE_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(ctype|hpv_status)}/{pathways,[_.=:0-9a-zA-Z]+}/scores.json")
    shell:
        "python {input.src} {input.fitted_regressor} {input.transformed_test} {output.score_json}"


rule exp_fit_classifier:
    input:
        src="scripts/python/fit_classifier.py",
        transformed_train=join(EXP_TRANS_TRAIN_DIR, "{transform}/{data}__target={target}/{pathways}/transformed.hdf")
    output:
        trained_model=join(EXP_REGRESSOR_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(ctype|hpv_status)}/{pathways,[_.=:0-9a-zA-Z]+}/classifier.pkl"),
        training_scores=join(EXP_REGRESSOR_DIR, "{transform,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}__target={target,(ctype|hpv_status)}/{pathways,[_.=:0-9a-zA-Z]+}/scores.json")
    shell:
        "python {input.src} {input.transformed_train} {output.trained_model} {output.training_scores}"


#############################################################
# MOFA fit/transform
#############################################################

rule exp_transform_mofa:
    input:
        src="scripts/R/transform_mofa.R",
        util="scripts/R/script_util.R",
        fitted_rds=join(EXP_FITTED_DIR, "method=mofa__{method_params}/{data}/{pathways}/fitted.rds"),
        test_set=join(EXP_DATA_DIR, "{data}__test.hdf"),
    output:
        transformed_test=join(EXP_TRANS_TEST_DIR, "method=mofa__{method_params,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=:0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "Rscript {input.src} {input.test_set} {input.fitted_rds} {output.transformed_test}"


rule exp_fit_mofa:
    input:
        src="scripts/R/fit_mofa.R",
        data_hdf=join(EXP_DATA_DIR, "{data}__train.hdf"),
    output:
        fitted_rds=join(EXP_FITTED_DIR, "method=mofa__k={k}__var_filter={vf,[.0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.rds"),
        trans_train_hdf=join(EXP_TRANS_TRAIN_DIR, "method=mofa__k={k,[0-9]+}__var_filter={vf,[.0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "Rscript {input.src} {input.data_hdf} {output.fitted_rds} {output.trans_train_hdf} --output_dim {wildcards.k} --variance_filter {wildcards.vf}"


#############################################################
# PLIER fit/transform
#############################################################

rule exp_transform_plier:
    input:
        src="scripts/R/transform_plier.R",
        fitted_rds=join(EXP_FITTED_DIR, "method=plier__{method_params}/{data}/{pathways}/fitted.rds"),
        test_set=join(EXP_DATA_DIR, "{data}__test.hdf"),
    output:
        transformed_test=join(EXP_TRANS_TEST_DIR, "method=plier__{method_params,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=:0-9a-zA-Z]+}/transformed.hdf")
    shell:
        "Rscript {input.src} {input.test_set} {input.fitted_rds} {output.transformed_test}"

rule exp_fit_plier:
    input:
        src="scripts/R/fit_plier.R",
        data_hdf=join(EXP_DATA_DIR, "{data}__train.hdf"),
        pwy_json=join(REACTOME_DIR, "{pathways}.json")
    output:
        fitted_rds=join(EXP_FITTED_DIR, "method=plier__k={k}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.rds"),
        trans_train_hdf=join(EXP_TRANS_TRAIN_DIR, "method=plier__k={k,[0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/transformed.hdf")
    threads: 2
    shell:
        "Rscript {input.src} {input.data_hdf} {input.pwy_json} {output.fitted_rds} {output.trans_train_hdf} --output_dim {wildcards.k}"



#############################################################
# PARADIGM fit/transform
#############################################################

rule exp_transform_paradigm:
    input:
        src="scripts/python/transform_paradigm.py",
        test_set=join(EXP_DATA_DIR, "{data}__test.hdf"),
        paradigm_hdf=join(PARADIGM_DIR, "paradigm.hdf"),
        fitted_hdf=join(EXP_FITTED_DIR, "method=paradigm__{method_params}/{data}/{pathways}/fitted.hdf")
    output:
        transformed_test=join(EXP_TRANS_TEST_DIR, "method=paradigm__{method_params,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=:0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "python {input.src} {input.test_set} {input.paradigm_hdf} {input.fitted_hdf} {output.transformed_test}"
        
        
rule exp_fit_paradigm:
    input:
        src="scripts/python/fit_paradigm.py",
        train_hdf=join(EXP_DATA_DIR, "{data}__train.hdf"),
        paradigm_hdf=join(PARADIGM_DIR, "paradigm.hdf"),
    output:
        fitted_hdf=join(EXP_FITTED_DIR, "method=paradigm__k={k}__var_filter={vf,[.0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.hdf"),
        trans_train_hdf=join(EXP_TRANS_TRAIN_DIR, "method=paradigm__k={k,[0-9]+}__var_filter={vf,[.0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/transformed.hdf")
    shell:
        "python {input.src} {input.train_hdf} {input.paradigm_hdf} {output.fitted_hdf} {output.trans_train_hdf} --output_dim {wildcards.k} --variance_filter {wildcards.vf} "

rule exp_prep_paradigm:
    input:
        src="scripts/python/prep_paradigm.py",
        paradigm_txt=join(PARADIGM_DIR, "merge_merged_reals.txt"),
    output:
        out_hdf=join(PARADIGM_DIR, "paradigm.hdf")
    shell:
        "python {input.src} {input.paradigm_txt} {output.out_hdf}"

rule exp_download_paradigm:
    output:
        #paradigm_tar=join(PARADIGM_DIR, "merge_merged_reals.tar.gz"),
        paradigm_txt=join(PARADIGM_DIR, "merge_merged_reals.txt")
    shell:
        "curl {PARADIGM_URL} --output {output.paradigm_tar} && tar -xvzf {output.paradigm_tar} --directory {PARADIGM_DIR}"


#############################################################
# GSVA fit/transform
#############################################################

rule exp_transform_gsva:
    input:
        src="scripts/R/transform_gsva.R",
        train_set=join(EXP_DATA_DIR, "{data}__train.hdf"),
        test_set=join(EXP_DATA_DIR, "{data}__test.hdf"),
        pwy_json=join(REACTOME_DIR, "reactome_ranked.json"),
        fitted_gsva=join(EXP_FITTED_DIR, "method=gsva__{method_params}/{data}/{pathways}/fitted.rds")
    output:
        transformed_test=join(EXP_TRANS_TEST_DIR, "method=gsva__{method_params,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=:0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "Rscript {input.src} {input.train_set} {input.test_set} {input.fitted_gsva} {input.pwy_json} {output.transformed_test} --threads {threads}"
        
        
rule exp_fit_gsva:
    input:
        src="scripts/R/fit_gsva.R",
        data_hdf=join(EXP_DATA_DIR, "{data}__train.hdf"),
        pwy_json=join(REACTOME_DIR, "reactome_ranked.json")
    output:
        fitted_rds=join(EXP_FITTED_DIR, "method=gsva__k={k}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.rds"),
        trans_train_hdf=join(EXP_TRANS_TRAIN_DIR, "method=gsva__k={k,[0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "Rscript {input.src} {input.data_hdf} {input.pwy_json} {output.trans_train_hdf} {output.fitted_rds} --output_dim {wildcards.k} --threads {threads}"



#############################################################
# PCA fit/transform
#############################################################

rule exp_transform_pca:
    input:
        src="scripts/python/transform_pca.py",
        test_set=join(EXP_DATA_DIR, "{data}__test.hdf"),
        fitted_pca=join(EXP_FITTED_DIR, "method=pca__{method_params}/{data}/{pathways}/fitted.hdf")
    output:
        transformed_test=join(EXP_TRANS_TEST_DIR, "method=pca__{method_params,[_.=:0-9a-zA-Z]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=:0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "python {input.src} {input.test_set} {input.fitted_pca} {output.transformed_test}"
        
        
rule exp_fit_pca:
    input:
        src="scripts/python/fit_pca.py",
        data_hdf=join(EXP_DATA_DIR, "{data}__train.hdf"),
    output:
        fitted_hdf=join(EXP_FITTED_DIR, "method=pca__k={k}__var_filter={vf}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/fitted.hdf"),
        trans_train_hdf=join(EXP_TRANS_TRAIN_DIR, "method=pca__k={k,[0-9]+}__var_filter={vf,[.0-9]+}/{data,[_.=:0-9a-zA-Z]+}/{pathways,[_.=0-9a-zA-Z]+}/transformed.hdf")
    threads: 4
    shell:
        "python {input.src} {input.data_hdf} {output.fitted_hdf} {output.trans_train_hdf} --output_dim {wildcards.k} --variance_filter {wildcards.vf}"
 


#####################################################################
# Simulation study
#####################################################################

############################
# Simulation plots

#rule sim_l1frac_lineplot:
#    input:
#        src="scripts/python/vis_corruption_lineplot.py",
#        scores_tsv=join(SIM_SCORE_DIR, "sim_scores.tsv")
#    output:
#        lineplot=join(SIM_VIS_DIR, "l1_fraction-lineplot.png"),
#    shell:
#        "python {input.src} {input.scores_tsv} {output.lineplot} {output.heatmap} l1_fraction X_pwy_spearman_corr"
#
#rule sim_missingness_lineplot:
#    input:
#        src="scripts/python/vis_corruption_lineplot.py",
#        scores_tsv=join(SIM_SCORE_DIR, "sim_scores.tsv")
#    output:
#        lineplot=join(SIM_VIS_DIR, "missing-lineplot.png"),
#    shell:
#        "python {input.src} {input.scores_tsv} {output.lineplot} {output.heatmap} missing X_pwy_spearman_corr"
#
#rule snr_lineplot:
#    input:
#        src="scripts/python/vis_corruption_lineplot.py",
#        scores_tsv=join(SIM_SCORE_DIR, "sim_scores.tsv")
#    output:
#        lineplot=join(SIM_VIS_DIR, "snr-lineplot.png"),
#    shell:
#        "python {input.src} {input.scores_tsv} {output.lineplot} {output.heatmap} snr X_pwy_spearman_corr"
#
#
#rule factor_plot:
#    input:
#        src="scripts/python/vis_pathway_factor_plot.py",
#        params_hdf=join(SIM_INFER_DIR, "method=matfac/{method_params}/{pwy_params}/{schema_params}/snr={snr}/srep={srep}/{corruption}/crep={crep}.hdf"),
#        true_pwy_json=join(SIM_SCHEMA_DIR, "{pwy_params}/{schema_params}/srep={srep}/pathways.json"),
#        used_pwy_json=join(SIM_PWY_DIR, "{pwy_params}/{schema_params}/snr={snr}/srep={srep}/{corruption}/crep={crep}.json")
#    output:
#        factorplot=join(SIM_FACTORPLOT_DIR, "method=matfac/{method_params,[_.=:a-zA-Z0-9]+}/{pwy_params,[_=a-z0-9]+}/{schema_params,[_.=a-z0-9]+}/snr={snr,[.0-9]+}/srep={srep,[0-9]+}/{corruption,[_.=a-z0-9]+}/crep={crep,[0-9]+}.html")
#    #params:
#        #plottedk=lambda wc: int(wc["k"])
#        #plottedk=lambda wc: 5
#    resources:
#        mem_mb=5000
#    shell:
#        "python {input.src} {input.params_hdf} {input.true_pwy_json} {input.used_pwy_json} {output.factorplot}"
#
#TODO
#rule embedding_scatter:
#    input:
#        src="scripts/python/vis_embedding_scatter.py",
#        clinical_hdf=join(TCGA_DIR, "tcga_clinical.hdf"),
#        params_hdf=join(SIM_INFER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.hdf")
#    output:
#        scatter_html=join(SIM_SCATTER_DIR, "usedk={usedk}_truek={truek}_snr={snr}_rep={rep}.html")
#    resources:
#        mem_mb=5000
#    shell:
#        "python {input.src} {input.params_hdf} {input.clinical_hdf} 0 {output.scatter_html}"

#########################
# Simulations: run MatFac

def construct_paths(analysis, size, keys=["methods", "top_pwys", "schema", "sim", "corruption", "replicates"]):
    return [join(*l) for l in product(*[SIM_PARAMS[analysis][size][k] for k in keys])]

rule sim_tabulate_scores:
    input:
        src="scripts/python/tabulate_scores.py",
        infer_scores=lambda wc: [join(SIM_SCORE_DIR, p, "infer.json") for p in construct_paths(wc["analysis"], wc["size"])],
        impute_scores=lambda wc: [join(SIM_SCORE_DIR, p, "impute.json") for p in construct_paths(wc["analysis"], wc["size"])],
    output:
        score_tsv=join(SIM_SCORE_DIR, "sim_scores", "{analysis,[_a-z0-9]+}", "{size,[_a-z0-9]+}.tsv")
    resources:
        mem_mb=1000
    shell:
        "python {input.src} {output.score_tsv} {input.infer_scores} {input.impute_scores}"


rule sim_score_matfac_impute:
    input:
        src="scripts/python/score_matfac_impute.py",
        imputed_hdf=join(SIM_IMPUTE_DIR, "method=matfac__{matfac_params}", "{pwys}", "{schema}", "missing={missing}__snr={snr}", "{corruption}", "{replicate}.hdf"),
        masked_hdf=join(SIM_DATA_DIR, "{pwys}", "{schema}", "missing={missing}__snr={snr}", "{replicate}", "masked.hdf"),
        true_hdf=join(SIM_DATA_DIR, "{pwys}", "{schema}", "snr={snr}", "{replicate}", "true.hdf"),
    output:
        score_json=join(SIM_SCORE_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_.=a-z0-9]+}", "missing={missing,[.0-9]+}__snr={snr,[.0-9]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[_.=a-z0-9]+}", "impute.json")
    shell:
        "python {input.src} {input.imputed_hdf} {input.masked_hdf} {input.true_hdf} {output.score_json}"


rule sim_matfac_impute:
    input:
        src="scripts/julia/impute_matfac.jl",
        model_bson=join(SIM_INFER_DIR, "method=matfac__{matfac_params}", "{pwys}", "{schema}", "{sim}", "{corruption}" ,"{replicate}.bson"),
    output:
        imputed_hdf=join(SIM_IMPUTE_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_.=a-z0-9]+}", "{sim,[_.=a-z0-9]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[.=a-z0-9]+}.hdf"),
    shell:
        "julia --project=. -t 1 {input.src} {input.model_bson} {output.imputed_hdf}"


rule score_matfac:
    input:
        src="scripts/python/score_matfac.py",
        true_params=join(SIM_PARAM_DIR, "{pwys}", "{schema}", "snr={snr}", "{replicate}", "true.hdf"),
        pred_params=join(SIM_INFER_DIR, "method=matfac__{matfac_params}", "{pwys}", "{schema}", "missing={missing}__snr={snr}", "{corruption}", "{replicate}.hdf")
    output:
        score_json=join(SIM_SCORE_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_.=a-z0-9]+}", "missing={missing,[.0-9]+}__snr={snr,[.0-9]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[_.=a-z0-9]+}", "infer.json")
    resources:
        #mem_mb=1000
        mem_mb=100
    shell:
        "python {input.src} {input.true_params} {input.pred_params} {output.score_json}" 

def get_m(wc):
    return int(wc["schema"].split("__")[1].split("=")[-1]) # Extract "m" as an integer

rule sim_fit_matfac:
    input:
        src="scripts/julia/fit_matfac.jl",
        status_file="gpu_status.txt",
        data=join(SIM_DATA_DIR, "{pwys}/{schema}/{sim}/{replicate}/masked.hdf"),
        pwy_json=join(SIM_PWY_DIR, "{pwys}/{schema}/{corruption}/{replicate}.json")
    output:
        inferred_bson=join(SIM_INFER_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_=a-z0-9]+}", "{sim,[_.=0-9a-z]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[_.=a-z0-9]+}.bson"),
        inferred_hdf=join(SIM_INFER_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_=a-z0-9]+}", "{sim,[_.=0-9a-z]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[_.=a-z0-9]+}.hdf"),
        history_json=join(SIM_HISTORY_DIR, "method=matfac__{matfac_params,[_.=a-zA-Z0-9]+}", "{pwys,[_=a-z0-9]+}", "{schema,[_=a-z0-9]+}", "{sim,[_.=0-9a-z]+}", "{corruption,[_.=a-z0-9]+}", "{replicate,[_.=a-z0-9]+}.json")
    resources:
        mem_mb=get_m, 
        gpu=lambda wc: int(get_m(wc) > 1000)
    params:
        matfac_kwargs=lambda wc: " ".join(wc["matfac_params"].split("__"))
    shell:
        "julia --project=. -t 1 {input.src} {input.data} {input.pwy_json} {output.inferred_bson} {output.inferred_hdf} {params.matfac_kwargs} history_json={output.history_json} gpu_status_file={input.status_file}"


#################################
# Simulated data corruption

rule shuffle_pathway_edges:
    input:
        src=join("scripts","python", "corrupt_pathway_edges.py"),
        pwy_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/pathways.json"),
    output:
        randomized_json=join(SIM_PWY_DIR, "{pwys,[_.=a-z0-9]+}/{schema,[_.=a-z0-9]+}/shuffled=1/{replicate,[_=a-z0-9]+}.json")
    resources:
        mem_mb=500
    shell:
        "python {input.src} {input.pwy_json} {output.randomized_json}"


rule mask_data:
    input:
        src=join("scripts", "python", "corrupt_mask_data.py"),
        data_hdf=join(SIM_DATA_DIR, "{pwys}/{schema}/snr={snr}", "{replicate}", "true.hdf")
    output:
        masked_hdf=join(SIM_DATA_DIR, "{pwys,[_=a-z0-9]+}/{schema,[._=a-z0-9]+}/missing={missing,[.0-9]+}__snr={snr,[.0-9]+}", "{replicate,[_=a-z0-9]+}", "masked.hdf")
    shell:
        "python {input.src} {input.data_hdf} {output.masked_hdf} each={wildcards.missing}"


rule corrupt_pathways:
    input:
        src="scripts/python/corrupt_pathways.py",
        pwy_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/pathways.json"),
        ranked_json=join(REACTOME_DIR, "reactome_ranked.json"),
        features_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/features.json")
    output:
        corr_json=join(SIM_PWY_DIR, "{pwys,[_=a-z0-9]+}/{schema,[_.=a-z0-9]+}/kadd={kadd,[.0-9]+}__krem={krem,[.0-9]+}__nadd={nadd,[.0-9]+}__nrem={nrem,[.0-9]+}/{replicate,[=a-z0-9]+}.json")
    shell:
        "python {input.src} {input.pwy_json} {input.ranked_json} {input.features_json} {wildcards.kadd} {wildcards.krem} {wildcards.nadd} {wildcards.nrem} {output.corr_json}"


rule copy_pathways:
    input:
        pwy_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/pathways.json"),
    output:
        cp_json=join(SIM_PWY_DIR, "{pwys,[_.=a-z0-9]+}/{schema,[_.=a-z0-9]+}/original=1/{replicate,[_=a-z0-9]+}.json")
    shell:
        "cp {input.pwy_json} {output.cp_json}"        


###############################
# Simulate data

rule simulate_data:
    input:
        src="scripts/julia/simulate_data.jl",
        pwy_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/pathways.json"), 
        sample_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/samples.json"),
        feature_json=join(SIM_SCHEMA_DIR, "{pwys}/{schema}/{replicate}/features.json")
    output:
        data_hdf=join(SIM_DATA_DIR, "{pwys,[_=a-z0-9]+}", "{schema,[._=a-z0-9]+}", "snr={snr,[.0-9]+}", "{replicate,[=0-9a-z]+}", "true.hdf"),
        param_hdf=join(SIM_PARAM_DIR,"{pwys,[_=a-z0-9]+}", "{schema,[._=a-z0-9]+}", "snr={snr,[.0-9]+}", "{replicate,[=0-9a-z]+}", "true.hdf")
    resources:
        #mem_mb=10000
        mem_mb=1000
    shell:
        "julia --project=. -t 1 {input.src} {input.pwy_json} {input.sample_json} {input.feature_json} {output.data_hdf} {output.param_hdf} snr={wildcards.snr}"
   

rule prep_sim_inputs:
    input:
        src="scripts/python/prep_simulation_inputs.py",
        full_pwy_json=join(REACTOME_DIR, "{pwys}.json"),
        full_samples_json=join(EXP_DATA_DIR, "samples__heldout_ctypes=.json"),
        full_features_json=join(EXP_DATA_DIR, "features__heldout_ctypes=.json")
    output:
        pwy_json=join(SIM_SCHEMA_DIR, "{pwys,[_=0-9a-z]+}/k={k}__m={m}__n={n}/{replicate,[_.=0-9a-z]+}/pathways.json"), 
        samples_json=join(SIM_SCHEMA_DIR, "{pwys,[_=0-9a-z]+}/k={k}__m={m}__n={n}/{replicate,[_.=0-9a-z]+}/samples.json"),
        features_json=join(SIM_SCHEMA_DIR, "{pwys,[_=0-9a-z]+}/k={k}__m={m}__n={n}/{replicate,[_.=0-9a-z]+}/features.json")
    shell:
        "python {input.src} {input.full_pwy_json} {input.full_samples_json} {input.full_features_json} {wildcards.m} {wildcards.k} {wildcards.n} {output.pwy_json} {output.samples_json} {output.features_json}"


#####################################################################
# Download and preprocess Reactome
#####################################################################

rule select_topk_pwys:
    input:
        src="scripts/python/prep_select_pathways.py",
        ranked_json=join(REACTOME_DIR, "reactome_ranked.json"),
    output:
        pwy_json=join(REACTOME_DIR, "top_pwys={topk, [0-9]+}.json"),
    resources:
        mem_mb=500
    shell:
        "python {input.src} {input.ranked_json} {wildcards.topk} {output.pwy_json}"


rule rank_pwys:
    input:
        src="scripts/python/rank_pathways.py",
        feature_json=join(EXP_DATA_DIR, "features__heldout_ctypes=.json"),
        all_pwy_json=join(REACTOME_DIR, "reactome.json")
    output:
        ranked_json=join(REACTOME_DIR, "reactome_ranked.json")
    resources:
        mem_mb=500
    shell:
        "python {input.src} {input.all_pwy_json} {input.feature_json} {output.ranked_json}"


rule reactome_txt_to_json:
    input:
        src="scripts/python/reactome_txt_to_json.py",
        txt=join(REACTOME_DIR, "reactome.hgnc.txt"),
    output:
        json=join(REACTOME_DIR, "reactome.json")
    shell:
        "python {input.src} {input.txt} {output.json}"


rule unzip_reactome:
    input:
        zipped=join(REACTOME_DIR, "reactome.hgnc.txt.gz")
    output:
        tsv=join(REACTOME_DIR, "reactome.hgnc.txt")
    shell:
        "gunzip {input.zipped}"


rule download_reactome:
    output:
        tarball=join(REACTOME_DIR, "reactome.hgnc.txt.gz")
    shell:
        "curl {REACTOME_URL} --output {output.tarball}"


#####################################################################
# Download and preprocess TCGA
#####################################################################


rule prep_tcga_splits:
    input:
        src="scripts/python/prep_tcga_splits.py",
        data_hdf=join(EXP_DATA_DIR, "{data}.hdf"),
        clinical_hdf=join(TCGA_DIR, "tcga_clinical.hdf"),
        paradigm_hdf=join(PARADIGM_DIR, "paradigm.hdf")
    output:
        train_sets=[join(EXP_DATA_DIR, "{data,[_.=:0-9a-zA-Z]+}__"+"fold={}".format(i)+"__target={target,[_:a-z]*}__train.hdf") for i in range(TCGA_FOLDS)],
        test_sets=[join(EXP_DATA_DIR, "{data,[_.=:0-9a-zA-Z]+}__"+"fold={}".format(i)+"__target={target,[_:a-z]*}__test.hdf") for i in range(TCGA_FOLDS)]
    params:
        prefix=lambda wc: join(EXP_DATA_DIR, wc["data"]),
    shell:
        "python {input.src} {input.data_hdf} {input.clinical_hdf} {input.paradigm_hdf} {params.prefix} --n_folds {TCGA_FOLDS} --target {wildcards.target} --paradigm_filter"


rule extract_samples_features:
    input:
        src="scripts/python/prep_extract_samples_features.py",
        tcga_hdf=join(EXP_DATA_DIR, "{kwargs}.hdf")
    output:
        samples_json=join(EXP_DATA_DIR, "samples__{kwargs,[_:=a-zA-Z]*}.json"),
        features_json=join(EXP_DATA_DIR, "features__{kwargs,[_:=a-zA-Z]*}.json")
    shell:
        "python {input.src} {input.tcga_hdf} {output.samples_json} {output.features_json}"

rule preprocess_tcga:
    input:
        src="scripts/python/preprocess_tcga.py",
        tcga_hdf=join(TCGA_DIR, "tcga_omic.hdf")
    output:
        prep_hdf=join(EXP_DATA_DIR, "{kwargs,[_:=a-zA-Z]*}.hdf") 
    params:
        opts=lambda wc: " ".join(wc["kwargs"].split("__"))
    resources:
        mem_mb=5000
    shell:
        "python {input.src} {input.tcga_hdf} {output.prep_hdf} std_assays= {params.opts}"

rule unzip_hdf:
    input:
        zipped="data/{path}/{head}.tar.gz"
    output:
        unzipped="data/{path}/{head,[_a-zA-Z0-9]+}.hdf"
    shell:
        "tar -xvzf {input.zipped} -C data/{wildcards.path}/"

rule download_tcga_omic:
    output:
        tcga_omic=join(TCGA_DIR, "tcga_omic.tar.gz"),
    shell:
        "curl https://zenodo.org/record/6977490/files/tcga_omic.tar.gz?download=1 -o {output.tcga_omic}"


rule download_tcga_clinical:
    output:
        tcga_clinical=join(TCGA_DIR, "tcga_clinical.tar.gz")
    shell:
        "curl https://zenodo.org/record/6977490/files/tcga_clinical.tar.gz?download=1 -o {output.tcga_clinical}"



#####################################################################
# GPU status
#####################################################################
rule initialize_gpu_status:
    input:
        src=join("scripts", "julia", "init_gpu_status.jl")
    output:
        status_file="gpu_status.txt"
    shell:
        "julia --project=. -t 1 {input.src} > {output.status_file}"



