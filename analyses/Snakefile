
from glob import glob
from os import path

configfile: "config.yaml"

SIM_PARAMS = config["sim_params"]
SIM_REPLICATES = list(range(SIM_PARAMS["sim_replicates"]))

TCGA_DATA_DIR = config["tcga_dir"]

SCRIPT_DIR = "scripts"
JULIA_SCRIPT_DIR = path.join(SCRIPT_DIR, "julia_scripts")
R_DIR = path.join(SCRIPT_DIR, "R_scripts")
NCI_PID_DIR = path.join("data","ncipid")
NCI_PWY_IDS = sorted([ fname.split(path.sep)[-1].split(".")[0] for fname in glob(path.join(NCI_PID_DIR, "pid_*.tab"))])
OMIC_TYPES = config["omic_types"]
CANCER_TYPES = config["cancer_types"]

TEMP_DIR = config["temp_dir"]
PWY_DIR = path.join(TEMP_DIR, "pathways")
SIF_DIR = path.join(PWY_DIR, "sifs")
PID_SIF_DIR = path.join(SIF_DIR, "ncipid")
PWY_JSON_DIR = path.join(PWY_DIR, "jsons")

TCGA_DIR = path.join(TEMP_DIR, "tcga_evaluations")
TCGA_VIS_DIR = path.join(TCGA_DIR, "visualizations")

SIM_DIR = path.join(TEMP_DIR, "simulation_study")
SIM_DATA_DIR = path.join(SIM_DIR, "datasets")
SIM_INFER_DIR = path.join(SIM_DIR, "inferred")

PYNBS_PREP_DIR = path.join(TEMP_DIR, "pynbs_tsvs")
PYNBS_NET_DIR = path.join(PYNBS_PREP_DIR, "networks")
PYNBS_MUT_DIR = path.join(PYNBS_PREP_DIR, "mutations")

#INSTREG = [0.0, 500.0, 5000.0]
#FEATREG = [0.0, 500.0, 5000.0]
INSTREG = [5000.0]
FEATREG = [5000.0]
LR = [0.002]#, 0.005]
#MAX_ITER = 800
#MAX_ITER = [5000] 
MAX_ITER = 1700

HOLDOUT_CTYPES = ["", "OV:GBM:LAML"]
#STD_ASSAYS = ["", "methylation"]
STD_ASSAYS = ["methylation:mrnaseq"]
EMBEDDING_PLOT_PC1 = [0,1]
EMBEDDING_PLOT_GPS = ["", "HNSC:LUSC:ESCA"]

rule all:
    input:
        expand(path.join(TCGA_VIS_DIR, "embedding_scatter", "pltgps={pltgps}_pc={pc}_holdout={holdout}_stdassay={stdassay}_lr={lr}_maxiter={mi}_instreg={instreg}_featreg={featreg}.html"), pltgps=EMBEDDING_PLOT_GPS, pc=EMBEDDING_PLOT_PC1, holdout=HOLDOUT_CTYPES, stdassay=STD_ASSAYS, lr=LR, mi=MAX_ITER, instreg=INSTREG, featreg=FEATREG),
        expand(path.join(TCGA_VIS_DIR, "pathway_factors", "holdout={holdout}_stdassay={stdassay}_lr={lr}_maxiter={mi}_instreg={instreg}_featreg={featreg}.html"), holdout=HOLDOUT_CTYPES, stdassay=STD_ASSAYS, lr=LR, mi=MAX_ITER, instreg=INSTREG, featreg=FEATREG),
        expand(path.join(TCGA_VIS_DIR, "plots", "holdout={holdout}_stdassay={stdassay}_lr={lr}_maxiter={mi}_instreg={instreg}_featreg={featreg}.png"), holdout=HOLDOUT_CTYPES, stdassay=STD_ASSAYS, lr=LR, mi=MAX_ITER, instreg=INSTREG, featreg=FEATREG),
        #expand(path.join(TCGA_DIR, "imputed", "holdout={holdout}_stdassay={stdassay}_lr={lr}_maxiter={mi}_instreg={instreg}_featreg={featreg}/imputed.hdf"), holdout=HOLDOUT_CTYPES, stdassay=STD_ASSAYS, lr=LR, mi=MAX_ITER, instreg=INSTREG, featreg=FEATREG)


rule sim_run_pynbs:
    input:
        img="pynbs.simg"
    output:
        "pynbs_help.txt"
    shell:
        "./{input.img} --help > {output}"


rule matfac_model_plot:
    input:
        model=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        omic=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        src=path.join(SCRIPT_DIR, "vis_model_plot.py")
    output:
        plt=path.join(TCGA_VIS_DIR, "plots", "{params,[_.:=0-9a-zA-Z]+}.png")
    shell:
        "python {input.src} {input.model} {input.omic} {output.plt}"


rule matfac_pwy_factor_plot:
    input:
        src=path.join(SCRIPT_DIR, "vis_pathway_factor_plot.py"),
        fitted=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        pathways=path.join(PWY_JSON_DIR, "ncipid.json")
    output:
        plot=path.join(TCGA_VIS_DIR, "pathway_factors", "{params,[_.:=0-9a-zA-Z]+}.html")
    shell:
        "python {input.src} {input.fitted} {input.pathways} {output.plot}"


rule matfac_embedding_scatter:
    input:
        fitted=path.join(TCGA_DIR, "fitted", "{params}", "model.hdf"),
        clinical=path.join(TCGA_DATA_DIR, "tcga_clinical.hdf"),
        src=path.join(SCRIPT_DIR, "vis_embedding_scatter.py")
    output:
        scatter=path.join(TCGA_VIS_DIR, "embedding_scatter", "pltgps={pltgps,[:A-Z]*}_pc={pc,[0-9]+}_{params,[_.:=0-9a-zA-Z]+}.html")
    shell:
        "python {input.src} {input.fitted} {input.clinical} {wildcards.pc} {output.scatter} {wildcards.pltgps}"


rule matfac_impute:
    input:
        fitted=path.join(TCGA_DIR, "fitted","{params}","model.hdf"),
        src=path.join(SCRIPT_DIR, "matfac_impute.jl")
    output:
        imputed=path.join(TCGA_DIR, "imputed","{params}","imputed.hdf")
    shell:
        "julia --project=.. {input.src} {input.fitted} {output.imputed}"


rule run_matfac:
    input:
        src=path.join(SCRIPT_DIR, "run_matfac.jl"),
        hdf=path.join(TCGA_DATA_DIR, "preprocessed","holdout={holdout}_stdassay={stdassay}.hdf"),
        pwy=path.join(PWY_JSON_DIR, "ncipid.json")
    output:
        fitted=path.join(TCGA_DIR, "fitted", "holdout={holdout,[:A-Z]*}_stdassay={stdassay,[:a-z]*}_lr={lr,[.0-9]+}_maxiter={mi,[0-9]+}_instreg={instreg,[.0-9]+}_featreg={featreg,[.0-9]+}", "model.hdf")
    resources:
        nvidia_gpu=1
    shell:
        "julia --project=.. {input.src} {input.hdf} {input.pwy} {output.fitted} inst_reg_weight={wildcards.instreg} feat_reg_weight={wildcards.featreg} lr={wildcards.lr} max_iter={wildcards.mi}"


rule matfac_preprocess_tcga_omic:
    input:
        src=path.join(SCRIPT_DIR, "preprocess_tcga.py"),
        omic=path.join(TCGA_DATA_DIR, "tcga_omic.hdf")
    output:
        path.join(TCGA_DATA_DIR, "preprocessed", "holdout={holdout,[:A-Z]*}_stdassay={stdassay,[:a-z]*}.hdf")
    shell:
        "python {input.src} {input.omic} {output} heldout_ctypes={wildcards.holdout} std_assays={wildcards.stdassay}"


rule sim_pynbs_prep_network:
    input:
        src=path.join(SCRIPT_DIR,"pynbs_prep_pwy.py"),
        pwys_json=path.join(PWY_JSON_DIR, "{pwys}.json")
    output:
        net_tsv=path.join(PYNBS_NET_DIR, "{pwys}.tsv")
    shell:
        "python {input.src} {input.pwys_json} {output.net_tsv}"


rule simulate_full_data:
    input:
        src=path.join(JULIA_SCRIPT_DIR, "simulate_data.jl"),
        pwy_json=path.join(PWY_JSON_DIR,"{pwys}.json"),
        pat_tree=path.join(TCGA_DIR, "tcga_patient_hierarchy.json")
    output:
        path.join(SIM_DATA_DIR, "tcga_{pwys}.hdf")
    shell:
        "julia --project=.. {input.src} {input.pwy_json} {input.pat_tree} {output}"


rule get_pynbs:
    output:
        "pynbs.simg"
    shell:
        "singularity pull --name {output} shub://dpmerrell/pynbs-singularity:latest"
    


def get_sifs(wc):
    print(wc["collection"])
    if wc["collection"] == "ncipid":
        ids = NCI_PWY_IDS
    sifs = sorted([path.join(PID_SIF_DIR, wc["collection"], "{}.sif").format(pwy) for pwy in ids])
    print(sifs)
    return sifs


rule ncipid_sifs_to_json:
    input:
        src=path.join(SCRIPT_DIR, "sifs_to_json.py"),
    #sifs=get_sifs
        sifs=expand(path.join(PID_SIF_DIR, "{pwy}.sif"), pwy=NCI_PWY_IDS),
        names=path.join(NCI_PID_DIR, "names.tab")
    output:
        json=path.join(PWY_JSON_DIR, "ncipid.json")
    shell:
        "python {input.src} --sif-files {input.sifs} --names-file {input.names} --out-json {output.json}"


rule ncipid_to_sif:
    input:
        src=path.join(SCRIPT_DIR, "pid_to_sif.py"),
        tab=path.join(NCI_PID_DIR, "{pwy}.tab")
    output:
        path.join(PID_SIF_DIR, "{pwy}.sif")
    shell:
        "python {input.src} {input.tab} {output}"



