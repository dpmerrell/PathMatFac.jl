import os
from glob import glob

########################################
# Global Variables
########################################

configfile: "config.yaml"
RESULTS_DIR = config["results_dir"]
SCRIPTS_DIR = config["scripts_dir"]


# PARADIGM Pathway preprocessing
PARADIGM_PWYS_DIR = config["paradigm_pathways_dir"]
PATHWAY_NAMES_FILE = os.path.join(PARADIGM_PWYS_DIR,"names.tab")
PATHWAY_FILES = glob(os.path.join(PARADIGM_PWYS_DIR,"pid_*_pathway.tab"))
PREPPED_PWYS_DIR = os.path.join(RESULTS_DIR, "pathways")
TCGA_PWYS_JSON = os.path.join(PREPPED_PWYS_DIR, "TCGA_partial.json")
PREPPED_TCGA_JSON = os.path.join(PREPPED_PWYS_DIR, "TCGA.json")

# PARADIGM TCGA data preprocessing
CNV_DATA_FILE = config["cnv_data_file"]
GENE_EXPR_DATA_FILE = config["gene_expr_data_file"]

# Simulation study
SIM_STUDY_DIR = os.path.join(RESULTS_DIR, "simulation_study")
SIM_DATA_DIR = os.path.join(SIM_STUDY_DIR, "data")
SIM_OBS_DIR = os.path.join(SIM_STUDY_DIR, "observations")
SIM_PRED_DIR = os.path.join(SIM_STUDY_DIR, "inferences")
SIM_SCORE_DIR = os.path.join(SIM_STUDY_DIR, "scores")
SIM_SCORE_SCRIPT = os.path.join(SCRIPTS_DIR, "sim_scoring.py")
SIM_OBS_SCRIPT = os.path.join(SCRIPTS_DIR, "observe_patterns.py")
SIM_PARAMS = config["simulation_study"]
SIM_REPLICATES = range(SIM_PARAMS["sim_replicates"])
SIM_N_PATIENTS = SIM_PARAMS["n_patients"]
SIMULATORS = SIM_PARAMS["simulators"]
SIM_OBS = SIM_PARAMS["observation_patterns"]
SIM_RANDOM_OBS = ["random_{}".format(v) for v in SIM_OBS["random"]]
SIM_OTHER_OBS = ["other_{}".format(v) for v in SIM_OBS["other"]]
SIM_METHODS = SIM_PARAMS["methods"]
PATHWAYS = ["TCGA"]
SIM_TEST_FRACS = SIM_PARAMS["test_frac"]

# Experimental evaluation
EXPERIMENT_DIR = os.path.join(RESULTS_DIR, "experimental_eval")
EXPERIMENT_DATA_DIR = os.path.join(EXPERIMENT_DIR, "data")
EXPERIMENT_OBS_DIR = os.path.join(EXPERIMENT_DIR, "observations")
EXPERIMENT_PRED_DIR = os.path.join(EXPERIMENT_DIR, "inferences")
EXPERIMENT_SCORE_DIR = os.path.join(EXPERIMENT_DIR, "scores")
EXPERIMENT_TEST_FRACS = SIM_PARAMS["test_frac"]

#########################################
# Rules
#########################################
rule all:
    input:
        # Scores from the simulation study
        expand(os.path.join(SIM_SCORE_DIR, 
		            "pwys={pwys}__sim={sim}__infer={infer}__npats={npats}__obs={obs}__rep={rep}.json"),
               pwys=PATHWAYS, sim=SIMULATORS, infer=SIM_METHODS,                            
	       npats=SIM_N_PATIENTS, obs=SIM_RANDOM_OBS, rep=SIM_REPLICATES),                   
        expand(os.path.join(SIM_SCORE_DIR,                                                  
		            "pwys={pwys}__sim={sim}__infer={infer}__npats={npats}__obs={obs}__rep={rep}.json"),
               pwys=PATHWAYS, sim=SIMULATORS, infer=SIM_METHODS, 
	       npats=SIM_N_PATIENTS, obs=SIM_OTHER_OBS, rep=SIM_REPLICATES)


##########################################
# Simulation study

rule sim_score_inferences:
    input:
        true_data=os.path.join(SIM_DATA_DIR, "pwys={pwys}__sim={sim}__npats={npats}__obs={obs}__rep={rep}.json"),
        inferences=os.path.join(SIM_PRED_DIR, "pwys={pwys}__sim={sim}__infer={infer}__npats={npats}__obs={obs}__rep={rep}.json"),
        obs=os.path.join(SIM_OBS_DIR, "pwys={pwys}__sim={sim}__npats={npats}__obs=other_TCGA__rep={rep}.json")
    output:
        os.path.join(SIM_SCORE_DIR, "pwys={pwys}__sim={sim}__infer={infer}__npats={npats}__obs={obs}__rep={rep}.json")
    shell:
        "python {SIM_SCORE_SCRIPT} {input.inferences} {input.true_data} {input.obs} {output}"


rule sim_junk_inferences:
    input:
        data=os.path.join(SIM_DATA_DIR, "pwys={pwy}__sim={sim}__npats={npats}__obs={obs}__rep={rep}.json"),
	pwys=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
	obs=os.path.join(SIM_OBS_DIR, "pwys={pwy}__sim={sim}__npats={npats}__obs={obs}__rep={rep}.json")
    output:
        inferences=os.path.join(SIM_PRED_DIR, "pwys={pwy}__sim={sim}__infer=junk__npats={npats}__obs={obs}__rep={rep}.json")
    shell:
        "python " + os.path.join(SCRIPTS_DIR, "junk_infer.py") + " "\
	"{input.data} {input.obs} {input.pwys} {output.inferences}"


rule make_tcga_obs_indices:
    input:
        pwy_file=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
    output:
        idx_json=os.path.join(SIM_OBS_DIR, "pwys={pwy}__sim={sim}__npats={npats}__obs=other_TCGA__rep={rep}.json")
    shell:
        "python {SIM_OBS_SCRIPT} TCGA {input.pwy_file} {output.idx_json} "+\
	"--tcga-csv-file {CNV_DATA_FILE}"


rule make_random_obs_indices:
    input:
        pwy_file=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
    output:
        idx_json=os.path.join(SIM_OBS_DIR, "pwys={pwy}__sim={sim}__npats={npats}__obs=random_{obs}__rep={rep}.json")
    shell:
        "python {SIM_OBS_SCRIPT} random {input.pwy_file} {output.idx_json} "+\
	"--obs-frac {wildcards.obs}"


rule simulate_junk_data:
    input:
        pwy_file=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
	sim_script=os.path.join(SCRIPTS_DIR, "simulate_data.py")
    output:
        sim_data=os.path.join(SIM_DATA_DIR, "pwys={pwy}__sim=random_junk_sim__npats={npats}__obs={obs}__rep={rep}.json"),
    shell:
        "python {input.sim_script} random_junk {input.pwy_file} {wildcards.npats} {output.sim_data}"


#########################################
# Experimental evaluation

# predict values of held-out variables
rule experiment_junk_inferences:
    input:
        data=os.path.join(EXPERIMENT_DATA_DIR, "tcga_cnv_mrna.json"),
	pwys=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
	obs=os.path.join(EXPERIMENT_OBS_DIR, "pwys={pwy}__obs={obs}.json")
    output:
        inferences=os.path.join(SIM_PRED_DIR, "pwys={pwy}__infer=junk__obs={obs}.json")
    shell:
        "python " + os.path.join(SCRIPTS_DIR, "junk_infer.py") + " "\
	"{input.data} {input.obs} {input.pwys} {output.inferences}"


rule experiment_observations:
    input:
        pwy_file=os.path.join(PREPPED_PWYS_DIR, "{pwy}.json"),
    output:
        idx_json=os.path.join(EXPERIMENT_OBS_DIR, "pwys={pwy}__obs=TCGA_{test_frac}_{rep}.json")
    shell:
        "python {SIM_OBS_SCRIPT} TCGA {input.pwy_file} {output.idx_json} "+\
	"--tcga-csv-file {CNV_DATA_FILE} "+\
	"--test-frac {wildcards.test_frac}"


#########################################
# TCGA data preprocessing

rule tcga_csvs_to_json:
    input:
        pwy=TCGA_PWYS_JSON,
        cnv=CNV_DATA_FILE,
        mrna=GENE_EXPR_DATA_FILE
    output:
        os.path.join(EXPERIMENT_DATA_DIR, "tcga_cnv_mrna.json")
    shell:
        "python "+os.path.join(SCRIPTS_DIR, "prep_tcga_data.py")+\
        " {input.pwy} {input.cnv} {input.mrna} {output}"
        

#########################################
# PARADIGM TCGA pathway preprocessing

rule finish_tcga_pathways:
    input:
        TCGA_PWYS_JSON
    output:
        PREPPED_TCGA_JSON
    shell:
        "python scripts/dogmatize_pathways.py {input} {output}"

rule pathways_to_json:
    input:
        pwy_names=PATHWAY_NAMES_FILE,
        pwy_files=PATHWAY_FILES
    output:
        TCGA_PWYS_JSON 
    shell:
        "python scripts/pathway_to_json.py {input.pwy_names} {input.pwy_files} {output}"



